name: Autoupdate

on:
  workflow_dispatch:
  schedule:
    - cron: "15 4 * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  autoupdate:
    name: Autoupdate from upstream
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure scripts directory exists
        run: mkdir -p scripts

      - name: Get latest upstream version (including prereleases)
        id: upstream_version
        run: |
          pip install packaging jq

          # Get current version
          CURRENT=$(cat fs/cosmotop.json | jq -r .version)
          echo "Current version: $CURRENT"

          # Get all release tags from upstream
          curl -s -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/bjia56/cosmotop/releases" \
            | jq -r '.[].tag_name' > all_tags.txt

          # Call the extracted Python script
          python3 scripts/find_latest_version.py all_tags.txt > version_output.txt

          # Parse the key=value output
          LATEST=$(grep '^LATEST=' version_output.txt | cut -d= -f2-)
          IS_BETA=$(grep '^IS_BETA=' version_output.txt | cut -d= -f2-)

          echo "current=${CURRENT}" >> "$GITHUB_ENV"
          echo "latest=${LATEST}" >> "$GITHUB_ENV"
          echo "is_beta=${IS_BETA}" >> "$GITHUB_ENV"

      - name: Setup NodeJS
        if: ${{ env.current != env.latest }}
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Do update
        if: ${{ env.current != env.latest }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          sed -i "s/${{ env.current }}/${{ env.latest }}/g" fs/cosmotop.json
          git add fs/cosmotop.json
          git commit -m "Update cosmotop to ${{ env.latest }}"

          npm i
          npm version patch
          npm publish ${{ env.is_beta == 'true' && '--tag beta' || '' }}

          git push
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}